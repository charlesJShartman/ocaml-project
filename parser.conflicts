
** Conflict (shift/reduce) in state 44.
** Token involved: LPAREN
** This state is reached from prog after reading:

LET REC function_header EQUAL CONSTRUCTOR LPAREN function_r

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
declaration prog 
LET REC function_header EQUAL expr 
                              constructor 
                              CONSTRUCTOR expr_tuple 
                                          (?)

** In state 44, looking ahead at LPAREN, reducing production
** expr -> function_r
** is permitted because of the following sub-derivation:

LPAREN expr expr_tuple // lookahead token appears because expr_tuple can begin with LPAREN
       function_r . 

** In state 44, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

LPAREN expr expr_tuple 
       function_r 
       function_r . LPAREN expr RPAREN 

** Conflict (shift/reduce) in state 41.
** Tokens involved: RPAREN LPAREN COMMA
** The following explanations concentrate on token RPAREN.
** This state is reached from prog after reading:

LET REC function_header EQUAL LPAREN CONSTRUCTOR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
declaration prog 
LET REC function_header EQUAL expr 
                              (?)

** In state 41, looking ahead at RPAREN, reducing production
** constructor -> CONSTRUCTOR
** is permitted because of the following sub-derivation:

LPAREN expr RPAREN // lookahead token appears
       constructor // lookahead token is inherited
       CONSTRUCTOR . 

** In state 41, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

LPAREN expr RPAREN 
       constructor 
       CONSTRUCTOR expr_tuple 
                   . RPAREN 

** Conflict (shift/reduce) in state 39.
** Token involved: LPAREN
** This state is reached from prog after reading:

LET REC function_header EQUAL CONSTRUCTOR LPAREN ID

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
declaration prog 
LET REC function_header EQUAL expr 
                              constructor 
                              CONSTRUCTOR expr_tuple 
                                          (?)

** In state 39, looking ahead at LPAREN, reducing production
** expr -> ID
** is permitted because of the following sub-derivation:

LPAREN expr expr_tuple // lookahead token appears because expr_tuple can begin with LPAREN
       ID . 

** In state 39, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

LPAREN expr expr_tuple 
       function_r 
       ID . LPAREN expr RPAREN 
